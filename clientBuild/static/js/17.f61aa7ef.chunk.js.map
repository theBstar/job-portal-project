{"version":3,"sources":["views/Candidate/Job.jsx"],"names":["useStyles","makeStyles","theme","root","marginTop","spacing","background","palette","paper","textAlign","width","padding","selfDetails","typographyBigFont","margin","fontSize","jobs","jobsHeader","marginBottom","jobsContainer","doneButton","Job","params","useParams","history","useHistory","classes","id","useState","isJobLoading","setIsJobLoading","job","setJob","useEffect","axios","get","then","res","status","Error","data","catch","className","variant","title","description","location","tag","isApplied","color","type","fullWidth","onClick","post","jid","goBack"],"mappings":"sMAOMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,UAAWF,EAAMG,QAAQ,IACzBC,WAAYJ,EAAMK,QAAQD,WAAWE,MACrCC,UAAW,SACXC,MAAO,MACPC,QAAST,EAAMG,QAAQ,EAAG,IAE5BO,YAAa,CACXD,QAAST,EAAMG,QAAQ,EAAG,IAE5BQ,kBAAmB,CACjBC,OAAQZ,EAAMG,QAAQ,EAAG,GACzBU,SAAU,UAEZC,KAAM,GAGNC,WAAY,CACVb,UAAWF,EAAMG,QAAQ,GACzBa,aAAc,GAEhBC,cAAe,GAGfC,WAAY,CACVN,OAAQZ,EAAMG,QAAQ,EAAG,EAAG,EAAG,GAC/BK,MAAO,WAqFIW,UAjFf,WACE,IAAMC,EAASC,cACTC,EAAUC,cACVC,EAAU1B,IACR2B,EAAOL,EAAPK,GAJK,EAK2BC,oBAAS,GALpC,mBAKNC,EALM,KAKQC,EALR,OAMSF,mBAAS,IANlB,mBAMNG,EANM,KAMDC,EANC,KAqCb,OA7BAC,qBAAU,WACRC,IAAMC,IAAN,eAAkBR,IACfS,MAAK,SAACC,GACL,GAAmB,MAAfA,EAAIC,OAAgB,MAAMC,MAAM,wBACpC,OAAOF,KAERD,MAAK,SAACC,GACLL,EAAOK,EAAIG,KAAKA,MAChBV,GAAgB,MAEjBW,OAAM,iBAGR,CAACd,GAAKK,EAAQF,GAiBf,kBAAC,IAAD,CAAWY,UAAWhB,EAAQvB,MAC5B,kBAAC,IAAD,CACEwC,QAAQ,QACRD,UAAWhB,EAAQb,mBAFrB,eAMA,kBAAC,IAAD,CACE8B,QAAQ,SADV,UAGUZ,EAAIa,OAEd,kBAAC,IAAD,CACED,QAAQ,SADV,gBAGgBZ,EAAIc,aAEpB,kBAAC,IAAD,CACEF,QAAQ,SADV,aAGaZ,EAAIe,UAEjB,kBAAC,IAAD,CACEH,QAAQ,SADV,QAGQZ,EAAIgB,MAETlB,IAAiBE,EAAIiB,WACtB,kBAAC,IAAD,CACEC,MAAM,UACNC,KAAK,SACLC,WAAS,EACTR,QAAQ,YACRD,UAAWhB,EAAQN,WACnBgC,QAjDR,WACElB,IAAMmB,KAAK,mBAAoB,CAAEC,IAAK3B,IACnCS,MAAK,SAACC,GACL,GAAmB,MAAfA,EAAIC,OAAgB,MAAMC,MAAM,wBACpC,OAAOF,KAERD,MAAK,WACJZ,EAAQ+B,YAETd,OAAM,iBAkCL","file":"static/js/17.f61aa7ef.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams, useHistory, } from 'react-router-dom';\nimport { makeStyles, Container } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport axios from 'axios';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(12),\n    background: theme.palette.background.paper,\n    textAlign: 'center',\n    width: '80%',\n    padding: theme.spacing(4, 3)\n  },\n  selfDetails: {\n    padding: theme.spacing(3, 2),\n  },\n  typographyBigFont: {\n    margin: theme.spacing(1, 0),\n    fontSize: '1.5rem',\n  },\n  jobs: {\n    // padding: theme.spacing(3, 2),\n  },\n  jobsHeader: {\n    marginTop: theme.spacing(3),\n    marginBottom: 0,\n  },\n  jobsContainer: {\n    // marginTop: theme.spacing(),\n  },\n  doneButton: {\n    margin: theme.spacing(4, 0, 2, 0),\n    width: '60%',\n  }\n}));\n\nfunction Job() {\n  const params = useParams();\n  const history = useHistory();\n  const classes = useStyles();\n  const { id } = params;\n  const [isJobLoading, setIsJobLoading] = useState(true);\n  const [job, setJob] = useState({});\n\n  useEffect(() => {\n    axios.get(`/job/${id}`)\n      .then((res) => {\n        if (res.status !== 200) throw Error('Something went wrong');\n        return res;\n      })\n      .then((res) => {\n        setJob(res.data.data);\n        setIsJobLoading(false);\n      })\n      .catch(() => {\n\n      });\n  }, [id], setJob, setIsJobLoading);\n\n  function handleJobApplication() {\n    axios.post('/application/new', { jid: id })\n      .then((res) => {\n        if (res.status !== 200) throw Error('Something went wrong');\n        return res;\n      })\n      .then(() => {\n        history.goBack();\n      })\n      .catch(() => {\n\n      })\n  }\n\n  return (\n    <Container className={classes.root}>\n      <Typography\n        variant=\"body1\"\n        className={classes.typographyBigFont}\n      >\n        Job details\n        </Typography>\n      <Typography\n        variant=\"body1\"\n      >\n        Title: {job.title}\n      </Typography>\n      <Typography\n        variant=\"body1\"\n      >\n        Description: {job.description}\n      </Typography>\n      <Typography\n        variant=\"body1\"\n      >\n        Location: {job.location}\n      </Typography>\n      <Typography\n        variant=\"body1\"\n      >\n        Tag: {job.tag}\n      </Typography>\n      {(!isJobLoading && !job.isApplied) && (\n        <Button\n          color=\"primary\"\n          type=\"button\"\n          fullWidth\n          variant=\"contained\"\n          className={classes.doneButton}\n          onClick={handleJobApplication}\n        >\n          Apply\n      </Button>\n      )}\n    </Container>\n  );\n}\n\nexport default Job;"],"sourceRoot":""}